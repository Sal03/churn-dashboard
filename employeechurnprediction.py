# -*- coding: utf-8 -*-
"""EmployeeChurnPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PiumHjk2vgXk39Up46rurUdVt4OhHevD

#Connect to Big Query
"""

from google.cloud import bigquery
import pandas as pd

# Initialize BigQuery client
client = bigquery.Client(project='employee-churn-59343')

# Query to load merged data
query = """
SELECT * FROM `employee-churn-59343.employeedata.FullMergedDatasets`
"""

# Load data into a DataFrame
df = client.query(query).to_dataframe()
df.head()

df.tail()

new_table_ref = dataset.table('tbl_new_employees')
new_table = client.get_table(new_table_ref)
new_table.schema

"""# Preprocess Data"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Drop rows with missing values
df = df.dropna()

# Encode categorical features
le = LabelEncoder()
df['department'] = le.fit_transform(df['department'])
df['attrition_status'] = le.fit_transform(df['attrition_status'])

# Define features and target
X = df[['department', 'years_at_company', 'satisfaction_level']]
y = df['attrition_status']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Train Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier

# Initialize the model
rf = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf.fit(X_train, y_train)

"""# Evaluate the Model"""

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Make predictions
y_pred = rf.predict(X_test)

# Print metrics
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

"""# Feature Importance Visualization"""

# Feature Importance
importances = rf.feature_importances_
feature_names = X.columns

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(x=importances, y=feature_names)
plt.title('Feature Importance')
plt.show()

import pandas as pd

# Assuming you have X_test and y_pred
results = pd.DataFrame(X_test)
results['predicted_attrition'] = y_pred

# Optional: include actual labels if available
# results['actual_attrition'] = y_test

results.to_csv("attrition_predictions.csv", index=False)